[user]
	name = <user>
	email = <mail>
[push]
	default = current
[core]
	trustctime = false
	editor = nano
	filemode = false
	##CLRF Mac, Linux (convert only on commit - CRLF might be introduced)
	autocrlf = input
	## Windows (convert on checkout and commit)
	## autocrlf = true
[color]
	ui = true
[credential]
	helper = cache --timeout=3600
[merge]
	conflictstyle = diff3
[rerere]
	enabled = 1
# color {{{
[color]
    branch = auto
    diff = auto
    status = auto

[color "branch"]
    current = red reverse bold
    local = magenta
    remote = white

[color "diff"]
    meta = yellow
    frag = magenta
    old = red bold
    new = green
    plain = white

[color "status"]
    added = green
    changed = yellow
    untracked = red bold

# }}}
# alias {{{
[alias]
    st = status -s

    c = commit
    cm = commit -m
    cma = commit -a -m
    ca = commit --amend
    amend = commit --amend
    caa = commit -a --amend -C HEAD
    filelog = log -u
    fl = log -u

    ai = add --interactive

    co = checkout
    br = branch 
    #"!git branch -ra | grep -v done"
    bra = branch -ra
    
   #list commands
    l = log --pretty=format:"%C(green)%h\\ %C(yellow)%ad%Cred%d\\ %Creset%s%C(magenta)\\ [%cn]" --decorate --date=short --graph
    ls = log --pretty=format:"%C(green)%h%C(yellow)%d\\ %Creset%s%C(magenta)\\ [%cn]" --graph --decorate --numstat --oneline
    lds = log --pretty=format:"%C(green)%h\\ %C(red)[%ad]%C(yellow)%d\\ %Creset%s%C(magenta)\\ [%cn]" --decorate --date=relative
    logd = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative	
    lc  = "!f() { git ll "$1"^.."$1"; }; f"
    lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

   #list all aliases
    la = "!git config -l | grep alias | cut -c 7-"
    d = diff --word-diff
    dc = diff --word-diff --cached

    #list modified files in last commit
    dl = "!git ll -1"
    
   #diff last commit
    dr  = "!f() { git diff "$1"^.."$1"; }; f"
    dlc = diff --cached HEAD^
    drw  = "!f() { git diff -w "$1"^.."$1"; }; f"
    branch = branch -ra

   #reset commands
    r = reset
    r1 = reset HEAD^
    r2 = reset HEAD^^
    rh = reset --hard
    rh1 = reset HEAD^ --hard
    rh2 = reset HEAD^^ --hard

   #git svn
    svnr = svn rebase
    svnd = svn dcommit
    svnl = svn log --oneline --show-commit

   #stash
    sl = stash list
    sa = stash apply
    ss = stash save

    cp = cherry-pick
    grep = grep -Ii
    gr = grep -Ii
   
   #grep from root folder
    gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

   #grep on filename
    f = "!git ls-files | grep -i"

   #rename branch tree to done-
    done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"

   #assume aliases
    assume = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
   #show assumed files
    assumed = "!git ls-files -v | grep ^h | cut -c 3-"
   #unassume all the assumed files
    unassumeall = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumeall = "!git st -s | awk {'print $2'} | xargs git assume"

    lasttag = describe --tags --abbrev=0
    lt = describe --tags --abbrev=0

    #merges
    ours = "!f() { git co --ours $@ && git add $@; }; f"
    theirs = "!f() { git co --theirs $@ && git add $@; }; f"

    #list remotes
    rem="!git config -l | grep remote.*url | tail -n +2"

    #apply patch from other local repo
    lap = "!f() { git --git-dir=$1 format-patch -k -1 --stdout $2 | git am -3 -k; }; f"

    #subtree add
    sba = "!f() { git subtree add --prefix $2 $1 master --squash; }; f" 
    # initial empty commit
    empty = "!git commit -am\"[empty] Initial commit\" --allow-empty"

    #add bitbucket remote
    ra = "!f() { git remote add $1 https://bitbucket.org/$2.git; }; f"
# }}}
